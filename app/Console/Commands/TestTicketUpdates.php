<?php

namespace App\Console\Commands;

use App\Models\Ticket;
use App\Models\User;
use App\Services\NotificationService;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;

class TestTicketUpdates extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = "test:ticket-updates {--create-tickets=3} {--test-api}";

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ";

    protected $notificationService;

    public function __construct(NotificationService $notificationService)
    {
        parent::__construct();
        $this->notificationService = $notificationService;
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫");
        $this->newLine();

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint
        if ($this->option("test-api")) {
            $this->testHomeApi();
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
        $ticketCount = (int) $this->option("create-tickets");
        if ($ticketCount > 0) {
            $this->createTestTickets($ticketCount);
        }

        $this->newLine();
        $this->info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
        $this->newLine();

        $this->comment("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ:");
        $this->line("1. –û—Ç–∫—Ä–æ–π—Ç–µ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ");
        $this->line(
            "2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø—Ä–∞–≤–∞–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞/–∞–¥–º–∏–Ω–∞",
        );
        $this->line("3. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12)");
        $this->line(
            "4. –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥",
        );
        $this->line(
            "5. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ—è–≤–∏—Ç—Å—è –ª–∏ –æ–Ω–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π",
        );

        return 0;
    }

    private function testHomeApi()
    {
        $this->info("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint...");

        try {
            $baseUrl = config("app.url", "http://localhost");
            $url = "{$baseUrl}/home/technician/tickets";

            $this->line("   URL: {$url}");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å endpoint'–∞
            $response = Http::get($url);

            if ($response->successful()) {
                $data = $response->json();
                $this->line("   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç");
                $this->line(
                    "   üìä –ó–∞—è–≤–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ: " . count($data["tickets"] ?? []),
                );
                $this->line(
                    "   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: " . json_encode($data["stats"] ?? []),
                );
            } else {
                $this->error("   ‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {$response->status()}");
                if ($response->status() === 403) {
                    $this->warn(
                        "   üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
                    );
                }
            }
        } catch (\Exception $e) {
            $this->error(
                "   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: " . $e->getMessage(),
            );
        }
    }

    private function createTestTickets(int $count)
    {
        $this->info("üé´ –°–æ–∑–¥–∞–Ω–∏–µ {$count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫...");

        // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫
        $user = User::first();
        if (!$user) {
            $this->error("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ");
            return;
        }

        $priorities = ["low", "medium", "high", "urgent"];
        $categories = ["hardware", "software", "network", "other"];

        for ($i = 1; $i <= $count; $i++) {
            $ticket = Ticket::create([
                "title" =>
                    "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{$i} - " . now()->format("d.m.Y H:i:s"),
                "description" =>
                    "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{$i}, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: " .
                    now()->toDateTimeString(),
                "category" => $categories[array_rand($categories)],
                "priority" => $priorities[array_rand($priorities)],
                "status" => "open",
                "reporter_name" => $user->name,
                "reporter_email" => $user->email,
                "user_id" => $user->id,
            ]);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            $this->notificationService->notifyNewTicket($ticket);

            $this->line(
                "   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ #{$ticket->id}: {$ticket->title}",
            );

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞—è–≤–æ–∫
            if ($i < $count) {
                sleep(1);
            }
        }

        $this->line("   üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–µ—Ö–Ω–∏–∫–∞–º");
    }
}
