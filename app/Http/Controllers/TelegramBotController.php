<?php

namespace App\Http\Controllers;

use App\Models\Ticket;
use App\Models\User;
use App\Services\NotificationService;
use BotMan\BotMan\BotMan;
use BotMan\BotMan\BotManFactory;
use BotMan\BotMan\Cache\LaravelCache;
use BotMan\BotMan\Drivers\DriverManager;
use BotMan\Drivers\Telegram\TelegramDriver;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Log;

class TelegramBotController extends Controller
{
    protected $botman;
    protected $notificationService;

    public function __construct(NotificationService $notificationService)
    {
        try {
            DriverManager::loadDriver(TelegramDriver::class);

            $token = config("services.telegram.token");
            Log::info(
                "Initializing TelegramDriver with token: " .
                    (empty($token) ? "EMPTY!" : "TOKEN PRESENT"),
            );

            $config = [
                "telegram" => [
                    "token" => $token,
                ],
            ];

            $this->botman = BotManFactory::create($config, new LaravelCache());
            $this->notificationService = $notificationService;

            $this->setupConversations();

            Log::info("TelegramBotController initialized successfully");
        } catch (\Exception $e) {
            Log::error(
                "Error initializing TelegramBotController: " . $e->getMessage(),
            );
            Log::error("Exception trace: " . $e->getTraceAsString());
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
     */
    public function handle(Request $request)
    {
        Log::info("Received webhook from Telegram: " . $request->getContent());

        try {
            $this->botman->listen();
            Log::info("BotMan processed the request successfully");
            return response()->json(["status" => "success"]);
        } catch (\Exception $e) {
            Log::error("Error handling Telegram webhook: " . $e->getMessage());
            Log::error("Exception trace: " . $e->getTraceAsString());
            return response()->json(
                ["status" => "error", "message" => $e->getMessage()],
                500,
            );
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –¥–∏–∞–ª–æ–≥–æ–≤ –±–æ—Ç–∞
     */
    public function setupConversations($botman = null)
    {
        $bot = $botman ?? $this->botman;

        Log::info("Setting up bot conversations");

        // –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        $bot->hears("/start", function (BotMan $bot) {
            Log::info("Received /start command");
            $bot->reply(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏!\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞.",
            );
        });

        // –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–π
        $this->botman->hears("/resolve_{id}", function (BotMan $bot, $id) {
            $this->resolveTicket($bot, $id);
        });

        // –ö–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        $this->botman->hears("/login", function (BotMan $bot) {
            $bot->startConversation(new \App\Conversations\LoginConversation());
        });

        // –í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏
        $this->botman->hears("/help", function (BotMan $bot) {
            $this->showHelp($bot);
        });

        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞—è–≤–æ–∫
        $this->botman->hears("/tickets", function (BotMan $bot) {
            $this->showTickets($bot);
        });

        // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        $this->botman->hears("/ticket_{id}", function (BotMan $bot, $id) {
            $this->showTicketDetails($bot, $id);
        });

        // –í–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É
        $this->botman->hears("/start_ticket_{id}", function (BotMan $bot, $id) {
            $this->startTicket($bot, $id);
        });

        // –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞—è–≤–∫—É —Å–µ–±–µ
        $this->botman->hears("/assign_{id}", function (BotMan $bot, $id) {
            $this->assignTicket($bot, $id);
        });

        // –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        $this->botman->hears("/logout", function (BotMan $bot) {
            $userId = $bot->getUser()->getId();
            $this->logoutUser($bot, $userId);
            $bot->reply("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.");
        });

        // –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        $this->botman->fallback(function (BotMan $bot) {
            $bot->reply(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
            );
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private function isAuthenticated(BotMan $bot)
    {
        $userId = $bot->getUser()->getId();
        $telegramUserData = $this->getTelegramUserData($userId);

        if (!$telegramUserData || !isset($telegramUserData["user_id"])) {
            $bot->reply(
                "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.",
            );
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $user = User::find($telegramUserData["user_id"]);
        if (!$user) {
            $bot->reply(
                "–í–∞—à–∞ —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /login.",
            );
            $this->logoutUser($bot, $userId);
            return false;
        }

        return $user;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     */
    private function getTelegramUserData($telegramId)
    {
        return cache()->get("telegram_user_" . $telegramId);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
     */
    public function saveTelegramUserData($telegramId, $userData)
    {
        cache()->put(
            "telegram_user_" . $telegramId,
            $userData,
            now()->addDays(30),
        );
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
     */
    private function logoutUser(BotMan $bot, $telegramId)
    {
        cache()->forget("telegram_user_" . $telegramId);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
     */
    private function showHelp(BotMan $bot)
    {
        $help = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n";
        $help .= "/login - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É\n";
        $help .= "/tickets - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞—è–≤–æ–∫\n";
        $help .= "/ticket_{id} - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ\n";
        $help .= "/start_ticket_{id} - –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É\n";
        $help .= "/assign_{id} - –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±–µ\n";
        $help .= "/resolve_{id} - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞—è–≤–∫—É —Ä–µ—à—ë–Ω–Ω–æ–π\n";
        $help .= "/logout - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n";
        $help .= "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É";

        $bot->reply($help);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞—è–≤–æ–∫
     */
    private function showTickets(BotMan $bot)
    {
        $user = $this->isAuthenticated($bot);
        if (!$user) {
            return;
        }

        if (!$user->canManageTickets()) {
            $bot->reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫.");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ($user->isAdmin() || $user->isMaster()) {
            $tickets = Ticket::where("status", "!=", "closed")
                ->orderBy("created_at", "desc")
                ->take(10)
                ->get();
        } else {
            $tickets = Ticket::where("status", "!=", "closed")
                ->where(function ($query) use ($user) {
                    $query
                        ->where("assigned_to_id", $user->id)
                        ->orWhereNull("assigned_to_id");
                })
                ->orderBy("created_at", "desc")
                ->take(10)
                ->get();
        }

        if ($tickets->isEmpty()) {
            $bot->reply("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        $reply = "üìã *–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫:*\n\n";

        foreach ($tickets as $ticket) {
            $status =
                $this->getStatusEmoji($ticket->status) .
                " " .
                $this->getHumanReadableStatus($ticket->status);
            $priority =
                $this->getPriorityEmoji($ticket->priority) .
                " " .
                ucfirst($ticket->priority);

            $reply .= "*ID {$ticket->id}*: {$ticket->title}\n";
            $reply .= "–°—Ç–∞—Ç—É—Å: {$status}\n";
            $reply .= "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {$priority}\n";

            if ($ticket->assigned_to_id) {
                $assignedTo = $ticket->assignedTo->name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                $reply .= "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {$assignedTo}\n";
            } else {
                $reply .= "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n";
            }

            $reply .=
                "–°–æ–∑–¥–∞–Ω–æ: " . $ticket->created_at->format("d.m.Y H:i") . "\n";
            $reply .= "/ticket_{$ticket->id} - –ü–æ–¥—Ä–æ–±–Ω–µ–µ\n\n";
        }

        $bot->reply($reply, ["parse_mode" => "Markdown"]);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
     */
    private function showTicketDetails(BotMan $bot, $id)
    {
        $user = $this->isAuthenticated($bot);
        if (!$user) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫
        if (!$user->canManageTickets()) {
            $bot->reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫.");
            return;
        }

        $ticket = Ticket::find($id);

        if (!$ticket) {
            $bot->reply("–ó–∞—è–≤–∫–∞ —Å ID {$id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        $status =
            $this->getStatusEmoji($ticket->status) .
            " " .
            $this->getHumanReadableStatus($ticket->status);
        $priority =
            $this->getPriorityEmoji($ticket->priority) .
            " " .
            ucfirst($ticket->priority);

        $reply = "üîç *–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ #{$ticket->id}*\n\n";
        $reply .= "*–ù–∞–∑–≤–∞–Ω–∏–µ:* {$ticket->title}\n";
        $reply .= "*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {$ticket->category}\n";
        $reply .= "*–°—Ç–∞—Ç—É—Å:* {$status}\n";
        $reply .= "*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* {$priority}\n\n";

        $reply .= "*–û–ø–∏—Å–∞–Ω–∏–µ:*\n{$ticket->description}\n\n";

        $reply .= "*–ó–∞—è–≤–∏—Ç–µ–ª—å:* {$ticket->reporter_name}\n";
        if ($ticket->reporter_email) {
            $reply .= "*Email:* {$ticket->reporter_email}\n";
        }
        if ($ticket->reporter_phone) {
            $reply .= "*–¢–µ–ª–µ—Ñ–æ–Ω:* {$ticket->reporter_phone}\n";
        }

        $reply .= "\n*–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* ";
        if ($ticket->location) {
            $reply .= $ticket->location->name;
            if ($ticket->room) {
                $reply .= ", {$ticket->room->name}";
            }
        } else {
            $reply .= "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        }

        $reply .= "\n\n*–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* ";
        if ($ticket->assigned_to_id) {
            $reply .= $ticket->assignedTo->name;
        } else {
            $reply .= "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω";
        }

        $reply .= "\n\n*–°–æ–∑–¥–∞–Ω–æ:* " . $ticket->created_at->format("d.m.Y H:i");

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        $actions = "\n\n*–î–µ–π—Å—Ç–≤–∏—è:*\n";

        if (
            $ticket->status !== "in_progress" &&
            $this->canTakeTicketInWork($user, $ticket)
        ) {
            $actions .= "/start_ticket_{$ticket->id} - –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É\n";
        }

        if (!$ticket->assigned_to_id) {
            $actions .= "/assign_{$ticket->id} - –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±–µ\n";
        }

        if (
            $ticket->status === "in_progress" &&
            $ticket->assigned_to_id === $user->id
        ) {
            $actions .= "/resolve_{$ticket->id} - –û—Ç–º–µ—Ç–∏—Ç—å —Ä–µ—à—ë–Ω–Ω–æ–π\n";
        }

        if (!empty(trim($actions)) && $actions != "\n\n*–î–µ–π—Å—Ç–≤–∏—è:*\n") {
            $reply .= $actions;
        }

        $bot->reply($reply, ["parse_mode" => "Markdown"]);
    }

    /**
     * –í–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É
     */
    private function startTicket(BotMan $bot, $id)
    {
        $user = $this->isAuthenticated($bot);
        if (!$user) {
            return;
        }

        $ticket = Ticket::find($id);

        if (!$ticket) {
            $bot->reply("–ó–∞—è–≤–∫–∞ —Å ID {$id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É
        if (!$this->canTakeTicketInWork($user, $ticket)) {
            $bot->reply(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–∑—è—Ç–∏—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç—É –∏–ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ.",
            );
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ –ª–∏ –∑–∞—è–≤–∫–∞
        if ($ticket->status === "closed") {
            $bot->reply("–ù–µ–ª—å–∑—è –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É –∑–∞–∫—Ä—ã—Ç—É—é –∑–∞—è–≤–∫—É.");
            return;
        }

        $oldStatus = $ticket->status;
        $oldAssignedId = $ticket->assigned_to_id;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
        $ticket->update([
            "status" => "in_progress",
            "assigned_to_id" => $user->id,
        ]);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        $this->notificationService->notifyTicketStatusChanged(
            $ticket,
            $oldStatus,
            "in_progress",
        );

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–æ —ç—Ç–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
        if ($oldAssignedId !== $user->id) {
            $this->notificationService->notifyTicketAssigned($ticket, $user);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
        $ticket->comments()->create([
            "user_id" => $user->id,
            "content" => "–ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ {$user->name}",
            "is_system" => true,
        ]);

        $bot->reply(
            "‚úÖ –ó–∞—è–≤–∫–∞ #{$ticket->id} —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å!",
        );
    }

    /**
     * –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞—è–≤–∫—É —Å–µ–±–µ
     */
    private function assignTicket(BotMan $bot, $id)
    {
        $user = $this->isAuthenticated($bot);
        if (!$user) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
        if (!$user->canManageTickets()) {
            $bot->reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫.");
            return;
        }

        $ticket = Ticket::find($id);

        if (!$ticket) {
            $bot->reply("–ó–∞—è–≤–∫–∞ —Å ID {$id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ –ª–∏ –∑–∞—è–≤–∫–∞
        if ($ticket->status === "closed") {
            $bot->reply("–ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –∑–∞–∫—Ä—ã—Ç—É—é –∑–∞—è–≤–∫—É.");
            return;
        }

        // –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ($ticket->assigned_to_id === $user->id) {
            $bot->reply("–ó–∞—è–≤–∫–∞ #{$ticket->id} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å.");
            return;
        }

        $oldAssignedId = $ticket->assigned_to_id;
        $ticket->update(["assigned_to_id" => $user->id]);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
        $this->notificationService->notifyTicketAssigned($ticket, $user);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
        $ticket->comments()->create([
            "user_id" => $user->id,
            "content" => "–ó–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ {$user->name}",
            "is_system" => true,
        ]);

        $bot->reply("‚úÖ –ó–∞—è–≤–∫–∞ #{$ticket->id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å!");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É
     */
    private function canTakeTicketInWork(User $user, Ticket $ticket)
    {
        return $user->canManageTickets() && $ticket->status !== "in_progress";
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
     */
    private function getHumanReadableStatus($status)
    {
        $statuses = [
            "new" => "–ù–æ–≤–∞—è",
            "in_progress" => "–í —Ä–∞–±–æ—Ç–µ",
            "resolved" => "–†–µ—à–µ–Ω–∞",
            "closed" => "–ó–∞–∫—Ä—ã—Ç–∞",
        ];

        return $statuses[$status] ?? $status;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
     */
    private function getStatusEmoji($status)
    {
        $emojis = [
            "new" => "üÜï",
            "in_progress" => "üîÑ",
            "resolved" => "‚úÖ",
            "closed" => "üîí",
        ];

        return $emojis[$status] ?? "‚ùì";
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
     */
    private function getPriorityEmoji($priority)
    {
        $emojis = [
            "low" => "üü¢",
            "medium" => "üü°",
            "high" => "üü†",
            "critical" => "üî¥",
        ];

        return $emojis[strtolower($priority)] ?? "‚ùì";
    }

    /**
     * –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—É—é
     */
    private function resolveTicket(BotMan $bot, $id)
    {
        $user = $this->isAuthenticated($bot);
        if (!$user) {
            return;
        }

        $ticket = Ticket::find($id);

        if (!$ticket) {
            $bot->reply("–ó–∞—è–≤–∫–∞ —Å ID {$id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ($ticket->assigned_to_id !== $user->id) {
            $bot->reply(
                "–¢–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—É—é.",
            );
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∑–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ
        if ($ticket->status !== "in_progress") {
            $bot->reply(
                "–¢–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ '–í —Ä–∞–±–æ—Ç–µ' –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—ã–µ.",
            );
            return;
        }

        $oldStatus = $ticket->status;
        $ticket->update(["status" => "resolved"]);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        $this->notificationService->notifyTicketStatusChanged(
            $ticket,
            $oldStatus,
            "resolved",
        );

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
        $ticket->comments()->create([
            "user_id" => $user->id,
            "content" => "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω–∞—è",
            "is_system" => true,
        ]);

        $bot->reply(
            "‚úÖ –ó–∞—è–≤–∫–∞ #{$ticket->id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω–∞—è! –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∑–∞—è–≤–∏—Ç–µ–ª—è.",
        );
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ NotificationService
     */
    public function sendNewTicketNotification(Ticket $ticket)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏
        if (
            \App\Models\SentTelegramNotification::wasNotificationSent(
                $ticket->id,
                "new_ticket",
            )
        ) {
            Log::info(
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ #{$ticket->id} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.",
            );
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ Telegram
        $users = User::whereHas("role", function ($query) {
            $query->whereIn("slug", ["admin", "master", "technician"]);
        })
            ->whereNotNull("telegram_id")
            ->get();

        if ($users->isEmpty()) {
            return;
        }

        $message = "üÜï *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{$ticket->id}*\n\n";
        $message .= "*–ù–∞–∑–≤–∞–Ω–∏–µ:* {$ticket->title}\n";
        $message .= "*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {$ticket->category}\n";
        $message .=
            "*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* " .
            $this->getPriorityEmoji($ticket->priority) .
            " " .
            ucfirst($ticket->priority) .
            "\n\n";
        $message .= "*–ó–∞—è–≤–∏—Ç–µ–ª—å:* {$ticket->reporter_name}\n\n";
        $message .= "/ticket_{$ticket->id} - –ü–æ–¥—Ä–æ–±–Ω–µ–µ";

        // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        $notifiedUserIds = [];

        foreach ($users as $user) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å telegram_id
                if (empty($user->telegram_id)) {
                    Log::warning("User {$user->id} has no telegram_id set");
                    continue;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                $messageHash = md5($user->telegram_id . $message);
                $cacheKey = "telegram_botman_message_sent_{$messageHash}";
                
                if (\Illuminate\Support\Facades\Cache::has($cacheKey)) {
                    Log::warning("Duplicate BotMan message prevented", [
                        'user_id' => $user->id,
                        'telegram_id' => $user->telegram_id,
                        'message_preview' => substr($message, 0, 100),
                        'message_hash' => $messageHash
                    ]);
                    continue;
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                \Illuminate\Support\Facades\Cache::put($cacheKey, true, 30);

                $this->botman->say(
                    $message,
                    $user->telegram_id,
                    TelegramDriver::class,
                    ["parse_mode" => "Markdown"],
                );
                $notifiedUserIds[] = $user->id;
                
                Log::info("Successfully sent Telegram notification to user {$user->id}");
            } catch (\Exception $e) {
                Log::error(
                    "Failed to send Telegram notification to user {$user->id}: " . $e->getMessage(),
                    [
                        'user_id' => $user->id,
                        'telegram_id' => $user->telegram_id,
                        'error' => $e->getMessage(),
                        'trace' => $e->getTraceAsString()
                    ]
                );
                
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º telegram_id, –æ—á–∏—â–∞–µ–º –µ–≥–æ
                if (strpos($e->getMessage(), 'chat not found') !== false || 
                    strpos($e->getMessage(), 'user not found') !== false) {
                    $user->update(['telegram_id' => null]);
                    Log::info("Cleared invalid telegram_id for user {$user->id}");
                }
            }
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        \App\Models\SentTelegramNotification::registerSentNotification(
            $ticket->id,
            "new_ticket",
            $notifiedUserIds,
        );
    }
}
