<?php

namespace App\Http\Controllers;

use App\Services\TelegramService;
use App\Services\TelegramAuthService;
use App\Services\TelegramCommandService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class TelegramController extends Controller
{
    protected TelegramService $telegramService;
    protected TelegramAuthService $authService;
    protected TelegramCommandService $commandService;

    public function __construct(
        TelegramService $telegramService,
        TelegramAuthService $authService,
        TelegramCommandService $commandService
    ) {
        $this->telegramService = $telegramService;
        $this->authService = $authService;
        $this->commandService = $commandService;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram
     */
    public function webhook(Request $request)
    {
        try {
            $update = $request->all();
            
            Log::info('Received Telegram webhook', [
                'update_id' => $update['update_id'] ?? null,
                'message_id' => $update['message']['message_id'] ?? null,
                'chat_id' => $update['message']['chat']['id'] ?? null,
                'text' => $update['message']['text'] ?? null
            ]);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (!isset($update['message'])) {
                return response()->json(['status' => 'ok']);
            }

            $message = $update['message'];
            $chatId = $message['chat']['id'];
            $text = $message['text'] ?? '';

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            $this->processMessage($chatId, $text, $message);

            return response()->json(['status' => 'ok']);
        } catch (\Exception $e) {
            Log::error('Error processing Telegram webhook', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'request' => $request->all()
            ]);

            return response()->json(['status' => 'error'], 500);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    protected function processMessage(int $chatId, string $text, array $message): void
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if ($this->authService->isUserInAuthProcess($chatId)) {
            $this->processAuthMessage($chatId, $text);
            return;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (strpos($text, '/') === 0) {
            $this->processCommand($chatId, $text);
            return;
        }

        // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        $this->handleUnknownMessage($chatId, $text);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    protected function processAuthMessage(int $chatId, string $text): void
    {
        $authState = $this->authService->getAuthState($chatId);
        
        if (!$authState) {
            return;
        }

        switch ($authState['step']) {
            case 'phone':
                $this->authService->processPhone($chatId, $text);
                break;
            case 'password':
                $this->authService->processPassword($chatId, $text);
                break;
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
     */
    protected function processCommand(int $chatId, string $text): void
    {
        $command = strtolower(trim($text));

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        if (preg_match('/^\/ticket_(\d+)$/', $command, $matches)) {
            $ticketId = (int) $matches[1];
            $this->commandService->handleTicketDetails($chatId, $ticketId);
            return;
        }

        if (preg_match('/^\/start_ticket_(\d+)$/', $command, $matches)) {
            $ticketId = (int) $matches[1];
            $this->commandService->handleStartTicket($chatId, $ticketId);
            return;
        }

        if (preg_match('/^\/assign_(\d+)$/', $command, $matches)) {
            $ticketId = (int) $matches[1];
            $this->commandService->handleAssignTicket($chatId, $ticketId);
            return;
        }

        if (preg_match('/^\/resolve_(\d+)$/', $command, $matches)) {
            $ticketId = (int) $matches[1];
            $this->commandService->handleResolveTicket($chatId, $ticketId);
            return;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
        switch ($command) {
            case '/start':
                $this->commandService->handleStart($chatId);
                break;
            case '/help':
                $this->commandService->handleHelp($chatId);
                break;
            case '/login':
                $this->authService->startAuth($chatId);
                break;
            case '/logout':
                $this->authService->logout($chatId);
                break;
            case '/tickets':
                $this->commandService->handleTickets($chatId);
                break;
            case '/active':
                $this->commandService->handleActive($chatId);
                break;
            default:
                $this->handleUnknownCommand($chatId, $command);
                break;
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
     */
    protected function handleUnknownCommand(int $chatId, string $command): void
    {
        $message = "‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n";
        $message .= "–ö–æ–º–∞–Ω–¥–∞ <code>{$command}</code> –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.\n\n";
        $message .= "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>/help</code> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.";

        $this->telegramService->sendMessage($chatId, $message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    protected function handleUnknownMessage(int $chatId, string $text): void
    {
        $message = "ü§î <b>–ù–µ –ø–æ–Ω–∏–º–∞—é</b>\n\n";
        $message .= "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å <code>/</code>.\n\n";
        $message .= "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>/help</code> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.";

        $this->telegramService->sendMessage($chatId, $message);
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     */
    public function test()
    {
        return response()->json([
            'status' => 'ok',
            'message' => 'Telegram controller is working',
            'timestamp' => now()->toISOString()
        ]);
    }
}
