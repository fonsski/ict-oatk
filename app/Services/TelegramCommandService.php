<?php

namespace App\Services;

use App\Models\Ticket;
use App\Models\User;
use Illuminate\Support\Facades\Log;

class TelegramCommandService
{
    protected TelegramService $telegramService;
    protected TelegramAuthService $authService;

    public function __construct(TelegramService $telegramService, TelegramAuthService $authService)
    {
        $this->telegramService = $telegramService;
        $this->authService = $authService;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
     */
    public function handleStart(int $chatId): bool
    {
        $message = "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏!</b>\n\n";
        $message .= "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n\n";
        $message .= "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n";
        $message .= "‚Ä¢ <code>/login</code> - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n";
        $message .= "‚Ä¢ <code>/help</code> - –°–ø—Ä–∞–≤–∫–∞";

        return $this->telegramService->sendMessage($chatId, $message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
     */
    public function handleHelp(int $chatId): bool
    {
        $message = "üìã <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n";
        
        if ($this->authService->isUserAuthenticated($chatId)) {
            $message .= "üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n";
        $message .= "‚Ä¢ <code>/tickets</code> - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫\n";
        $message .= "‚Ä¢ <code>/all_tickets</code> - –í—Å–µ –∑–∞—è–≤–∫–∏ (–≤–∫–ª—é—á–∞—è –∑–∞–∫—Ä—ã—Ç—ã–µ)\n";
        $message .= "‚Ä¢ <code>/active</code> - –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ\n";
        $message .= "‚Ä¢ <code>/stats</code> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫\n";
            $message .= "‚Ä¢ <code>/ticket_123</code> - –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞—è–≤–∫–∏ #123\n";
            $message .= "‚Ä¢ <code>/start_ticket_123</code> - –í–∑—è—Ç—å –∑–∞—è–≤–∫—É #123 –≤ —Ä–∞–±–æ—Ç—É\n";
            $message .= "‚Ä¢ <code>/assign_123</code> - –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞—è–≤–∫—É #123 —Å–µ–±–µ\n";
            $message .= "‚Ä¢ <code>/resolve_123</code> - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞—è–≤–∫—É #123 –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—É—é\n";
            $message .= "‚Ä¢ <code>/logout</code> - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n\n";
        } else {
            $message .= "üîì <b>–ö–æ–º–∞–Ω–¥—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</b>\n";
            $message .= "‚Ä¢ <code>/login</code> - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n\n";
        }
        
        $message .= "üìû <b>–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n";
        $message .= "‚Ä¢ <code>/start</code> - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n";
        $message .= "‚Ä¢ <code>/help</code> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É";

        return $this->telegramService->sendMessage($chatId, $message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /tickets
     */
    public function handleTickets(int $chatId): bool
    {
        $user = $this->authService->getAuthenticatedUser($chatId);
        if (!$user) {
            return $this->sendAuthRequired($chatId);
        }

        if (!$user->canManageTickets()) {
            $message = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ($user->isAdmin() || $user->isMaster()) {
            $tickets = Ticket::where('status', '!=', 'closed')
                ->orderBy('created_at', 'desc')
                ->take(20)
                ->get();
        } else {
            $tickets = Ticket::where('status', '!=', 'closed')
                ->where(function ($query) use ($user) {
                    $query->where('assigned_to_id', $user->id)
                          ->orWhereNull('assigned_to_id');
                })
                ->orderBy('created_at', 'desc')
                ->take(20)
                ->get();
        }

        if ($tickets->isEmpty()) {
            $message = "üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        $message = "üìã <b>–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫:</b>\n\n";

        foreach ($tickets as $ticket) {
            $status = $this->getStatusEmoji($ticket->status) . " " . $this->getHumanReadableStatus($ticket->status);
            $priority = $this->getPriorityEmoji($ticket->priority) . " " . ucfirst($ticket->priority);

            $message .= "üÜî <b>#{$ticket->id}</b>: {$ticket->title}\n";
            $message .= "üìä –°—Ç–∞—Ç—É—Å: {$status}\n";
            $message .= "‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {$priority}\n";

            if ($ticket->assigned_to_id) {
                $assignedTo = $ticket->assignedTo->name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                $message .= "üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {$assignedTo}\n";
            } else {
                $message .= "üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n";
            }

            $message .= "üìÖ –°–æ–∑–¥–∞–Ω–æ: " . $ticket->created_at->format("d.m.Y H:i") . "\n";
            $message .= "üîç <code>/ticket_{$ticket->id}</code> - –ü–æ–¥—Ä–æ–±–Ω–µ–µ\n\n";
        }

        return $this->telegramService->sendMessage($chatId, $message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /all_tickets
     */
    public function handleAllTickets(int $chatId): bool
    {
        $user = $this->authService->getAuthenticatedUser($chatId);
        if (!$user) {
            return $this->sendAuthRequired($chatId);
        }

        if (!$user->canManageTickets()) {
            $message = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ (–≤–∫–ª—é—á–∞—è –∑–∞–∫—Ä—ã—Ç—ã–µ)
        if ($user->isAdmin() || $user->isMaster()) {
            $tickets = Ticket::orderBy('created_at', 'desc')
                ->take(30)
                ->get();
        } else {
            $tickets = Ticket::where(function ($query) use ($user) {
                $query->where('assigned_to_id', $user->id)
                      ->orWhereNull('assigned_to_id');
            })
            ->orderBy('created_at', 'desc')
            ->take(30)
            ->get();
        }

        if ($tickets->isEmpty()) {
            $message = "üìã –ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        $message = "üìã <b>–í—Å–µ –∑–∞—è–≤–∫–∏:</b>\n\n";

        foreach ($tickets as $ticket) {
            $status = $this->getStatusEmoji($ticket->status) . " " . $this->getHumanReadableStatus($ticket->status);
            $priority = $this->getPriorityEmoji($ticket->priority) . " " . ucfirst($ticket->priority);

            $message .= "üÜî <b>#{$ticket->id}</b>: {$ticket->title}\n";
            $message .= "üìä –°—Ç–∞—Ç—É—Å: {$status}\n";
            $message .= "‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {$priority}\n";

            if ($ticket->assigned_to_id) {
                $assignedTo = $ticket->assignedTo->name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                $message .= "üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {$assignedTo}\n";
            } else {
                $message .= "üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n";
            }

            $message .= "üìÖ –°–æ–∑–¥–∞–Ω–æ: " . $ticket->created_at->format("d.m.Y H:i") . "\n";
            $message .= "üîç <code>/ticket_{$ticket->id}</code> - –ü–æ–¥—Ä–æ–±–Ω–µ–µ\n\n";
        }

        $message .= "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/tickets</code> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫";

        return $this->telegramService->sendMessage($chatId, $message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /active
     */
    public function handleActive(int $chatId): bool
    {
        $user = $this->authService->getAuthenticatedUser($chatId);
        if (!$user) {
            return $this->sendAuthRequired($chatId);
        }

        if (!$user->canManageTickets()) {
            $message = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ
        if ($user->isAdmin() || $user->isMaster()) {
            $tickets = Ticket::where('status', 'in_progress')
                ->orderBy('updated_at', 'desc')
                ->take(15)
                ->get();
        } else {
            $tickets = Ticket::where('status', 'in_progress')
                ->where('assigned_to_id', $user->id)
                ->orderBy('updated_at', 'desc')
                ->take(15)
                ->get();
        }

        if ($tickets->isEmpty()) {
            $message = "üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        $message = "üîÑ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ:</b>\n\n";

        foreach ($tickets as $ticket) {
            $priority = $this->getPriorityEmoji($ticket->priority) . " " . ucfirst($ticket->priority);
            
            $message .= "üÜî <b>#{$ticket->id}</b>: {$ticket->title}\n";
            $message .= "‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {$priority}\n";
            
            if ($ticket->assignedTo) {
                $message .= "üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {$ticket->assignedTo->name}\n";
            }
            
            $message .= "üìÖ –í–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É: " . $ticket->updated_at->format("d.m.Y H:i") . "\n";
            $message .= "üìù –ó–∞—è–≤–∏—Ç–µ–ª—å: {$ticket->reporter_name}\n";
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            if ($ticket->assigned_to_id === $user->id) {
                $message .= "‚úÖ <code>/resolve_{$ticket->id}</code> - –û—Ç–º–µ—Ç–∏—Ç—å —Ä–µ—à–µ–Ω–Ω–æ–π\n";
            }
            $message .= "üîç <code>/ticket_{$ticket->id}</code> - –ü–æ–¥—Ä–æ–±–Ω–µ–µ\n\n";
        }

        $message .= "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/tickets</code> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫";

        return $this->telegramService->sendMessage($chatId, $message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /stats
     */
    public function handleStats(int $chatId): bool
    {
        $user = $this->authService->getAuthenticatedUser($chatId);
        if (!$user) {
            return $this->sendAuthRequired($chatId);
        }

        if (!$user->canManageTickets()) {
            $message = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ($user->isAdmin() || $user->isMaster()) {
            $allTickets = Ticket::all();
        } else {
            $allTickets = Ticket::where(function ($query) use ($user) {
                $query->where('assigned_to_id', $user->id)
                      ->orWhereNull('assigned_to_id');
            })->get();
        }

        $stats = [
            'total' => $allTickets->count(),
            'open' => $allTickets->where('status', 'open')->count(),
            'in_progress' => $allTickets->where('status', 'in_progress')->count(),
            'resolved' => $allTickets->where('status', 'resolved')->count(),
            'closed' => $allTickets->where('status', 'closed')->count(),
        ];

        $message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫</b>\n\n";
        $message .= "üìã <b>–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:</b> {$stats['total']}\n";
        $message .= "üÜï <b>–û—Ç–∫—Ä—ã—Ç—ã—Ö:</b> {$stats['open']}\n";
        $message .= "üîÑ <b>–í —Ä–∞–±–æ—Ç–µ:</b> {$stats['in_progress']}\n";
        $message .= "‚úÖ <b>–†–µ—à–µ–Ω–Ω—ã—Ö:</b> {$stats['resolved']}\n";
        $message .= "üîí <b>–ó–∞–∫—Ä—ã—Ç—ã—Ö:</b> {$stats['closed']}\n\n";

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        if ($stats['total'] > 0) {
            $openPercent = round(($stats['open'] / $stats['total']) * 100);
            $inProgressPercent = round(($stats['in_progress'] / $stats['total']) * 100);
            $resolvedPercent = round(($stats['resolved'] / $stats['total']) * 100);
            $closedPercent = round(($stats['closed'] / $stats['total']) * 100);

            $message .= "üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ:</b>\n";
            $message .= "üÜï –û—Ç–∫—Ä—ã—Ç—ã—Ö: {$openPercent}%\n";
            $message .= "üîÑ –í —Ä–∞–±–æ—Ç–µ: {$inProgressPercent}%\n";
            $message .= "‚úÖ –†–µ—à–µ–Ω–Ω—ã—Ö: {$resolvedPercent}%\n";
            $message .= "üîí –ó–∞–∫—Ä—ã—Ç—ã—Ö: {$closedPercent}%";
        }

        return $this->telegramService->sendMessage($chatId, $message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏
     */
    public function handleTicketDetails(int $chatId, int $ticketId): bool
    {
        $user = $this->authService->getAuthenticatedUser($chatId);
        if (!$user) {
            return $this->sendAuthRequired($chatId);
        }

        if (!$user->canManageTickets()) {
            $message = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        $ticket = Ticket::find($ticketId);
        if (!$ticket) {
            $message = "‚ùå –ó–∞—è–≤–∫–∞ —Å ID {$ticketId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        $status = $this->getStatusEmoji($ticket->status) . " " . $this->getHumanReadableStatus($ticket->status);
        $priority = $this->getPriorityEmoji($ticket->priority) . " " . ucfirst($ticket->priority);

        $message = "üîç <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ #{$ticket->id}</b>\n\n";
        $message .= "üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {$ticket->title}\n";
        $message .= "üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {$ticket->category}\n";
        $message .= "üìä <b>–°—Ç–∞—Ç—É—Å:</b> {$status}\n";
        $message .= "‚ö° <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {$priority}\n\n";

        $message .= "üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{$ticket->description}\n\n";

        $message .= "üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {$ticket->reporter_name}\n";
        if ($ticket->reporter_email) {
            $message .= "üìß <b>Email:</b> {$ticket->reporter_email}\n";
        }
        if ($ticket->reporter_phone) {
            $message .= "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {$ticket->reporter_phone}\n";
        }

        $message .= "\nüìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> ";
        if ($ticket->location) {
            $message .= $ticket->location->name;
            if ($ticket->room) {
                $message .= ", {$ticket->room->name}";
            }
        } else {
            $message .= "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        }

        $message .= "\n\nüë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ";
        if ($ticket->assigned_to_id) {
            $message .= $ticket->assignedTo->name;
        } else {
            $message .= "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω";
        }

        $message .= "\n\nüìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> " . $ticket->created_at->format("d.m.Y H:i");

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        $message .= "\n\nüîß <b>–î–µ–π—Å—Ç–≤–∏—è:</b>\n";

        if ($ticket->status !== "in_progress" && $user->canManageTickets()) {
            $message .= "‚ñ∂Ô∏è <code>/start_ticket_{$ticket->id}</code> - –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É\n";
        }

        if (!$ticket->assigned_to_id && $user->canManageTickets()) {
            $message .= "üë§ <code>/assign_{$ticket->id}</code> - –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±–µ\n";
        }

        if ($ticket->status === "in_progress" && $ticket->assigned_to_id === $user->id && $user->canManageTickets()) {
            $message .= "‚úÖ <code>/resolve_{$ticket->id}</code> - –û—Ç–º–µ—Ç–∏—Ç—å —Ä–µ—à–µ–Ω–Ω–æ–π\n";
        }

        return $this->telegramService->sendMessage($chatId, $message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤–∑—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç—É
     */
    public function handleStartTicket(int $chatId, int $ticketId): bool
    {
        $user = $this->authService->getAuthenticatedUser($chatId);
        if (!$user) {
            return $this->sendAuthRequired($chatId);
        }

        if (!$user->canManageTickets()) {
            $message = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–∑—è—Ç–∏—è –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç—É.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        $ticket = Ticket::find($ticketId);
        if (!$ticket) {
            $message = "‚ùå –ó–∞—è–≤–∫–∞ —Å ID {$ticketId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        if ($ticket->status === "closed") {
            $message = "‚ùå –ù–µ–ª—å–∑—è –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É –∑–∞–∫—Ä—ã—Ç—É—é –∑–∞—è–≤–∫—É.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        if ($ticket->status === "in_progress") {
            $message = "‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        try {
            $oldStatus = $ticket->status;
            $ticket->update([
                'status' => 'in_progress',
                'assigned_to_id' => $user->id
            ]);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            $ticket->comments()->create([
                'user_id' => $user->id,
                'content' => "–ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ {$user->name}",
                'is_system' => true
            ]);

            $message = "‚úÖ <b>–ó–∞—è–≤–∫–∞ #{$ticket->id} —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!</b>\n\n";
            $message .= "üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {$ticket->title}\n";
            $message .= "üë§ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞:</b> {$user->name}\n";
            $message .= "üìä <b>–°—Ç–∞—Ç—É—Å:</b> " . $this->getStatusEmoji('in_progress') . " –í —Ä–∞–±–æ—Ç–µ";

            Log::info('Ticket started successfully', [
                'chat_id' => $chatId,
                'ticket_id' => $ticketId,
                'user_id' => $user->id,
                'old_status' => $oldStatus,
                'new_status' => 'in_progress'
            ]);

            return $this->telegramService->sendMessage($chatId, $message);
        } catch (\Exception $e) {
            Log::error('Error starting ticket', [
                'chat_id' => $chatId,
                'ticket_id' => $ticketId,
                'user_id' => $user->id,
                'error' => $e->getMessage()
            ]);

            $message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
            return $this->telegramService->sendMessage($chatId, $message);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
     */
    public function handleAssignTicket(int $chatId, int $ticketId): bool
    {
        $user = $this->authService->getAuthenticatedUser($chatId);
        if (!$user) {
            return $this->sendAuthRequired($chatId);
        }

        if (!$user->canManageTickets()) {
            $message = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        $ticket = Ticket::find($ticketId);
        if (!$ticket) {
            $message = "‚ùå –ó–∞—è–≤–∫–∞ —Å ID {$ticketId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        if ($ticket->status === "closed") {
            $message = "‚ùå –ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –∑–∞–∫—Ä—ã—Ç—É—é –∑–∞—è–≤–∫—É.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        if ($ticket->assigned_to_id === $user->id) {
            $message = "‚ÑπÔ∏è –ó–∞—è–≤–∫–∞ #{$ticket->id} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        $ticket->update(['assigned_to_id' => $user->id]);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        $ticket->comments()->create([
            'user_id' => $user->id,
            'content' => "–ó–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ {$user->name}",
            'is_system' => true
        ]);

        $message = "‚úÖ <b>–ó–∞—è–≤–∫–∞ #{$ticket->id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å!</b>\n\n";
        $message .= "üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {$ticket->title}\n";
        $message .= "üë§ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞:</b> {$user->name}";

        return $this->telegramService->sendMessage($chatId, $message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–π
     */
    public function handleResolveTicket(int $chatId, int $ticketId): bool
    {
        $user = $this->authService->getAuthenticatedUser($chatId);
        if (!$user) {
            return $this->sendAuthRequired($chatId);
        }

        if (!$user->canManageTickets()) {
            $message = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        $ticket = Ticket::find($ticketId);
        if (!$ticket) {
            $message = "‚ùå –ó–∞—è–≤–∫–∞ —Å ID {$ticketId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        if ($ticket->assigned_to_id !== $user->id) {
            $message = "‚ùå –¢–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—É—é.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        if ($ticket->status !== "in_progress") {
            $message = "‚ùå –¢–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ '–í —Ä–∞–±–æ—Ç–µ' –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–µ.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        $ticket->update(['status' => 'resolved']);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        $ticket->comments()->create([
            'user_id' => $user->id,
            'content' => "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–∞—è",
            'is_system' => true
        ]);

        $message = "‚úÖ <b>–ó–∞—è–≤–∫–∞ #{$ticket->id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–∞—è!</b>\n\n";
        $message .= "üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {$ticket->title}\n";
        $message .= "üë§ <b>–†–µ—à–µ–Ω–∞:</b> {$user->name}\n";
        $message .= "üìä <b>–°—Ç–∞—Ç—É—Å:</b> " . $this->getStatusEmoji('resolved') . " –†–µ—à–µ–Ω–∞\n\n";
        $message .= "‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∑–∞—è–≤–∏—Ç–µ–ª—è.";

        return $this->telegramService->sendMessage($chatId, $message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    protected function sendAuthRequired(int $chatId): bool
    {
        $message = "üîê <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n\n";
        $message .= "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n\n";
        $message .= "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>/login</code> –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.";
        
        return $this->telegramService->sendMessage($chatId, $message);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
     */
    protected function getStatusEmoji(string $status): string
    {
        return match ($status) {
            'open' => 'üÜï',
            'in_progress' => 'üîÑ',
            'resolved' => '‚úÖ',
            'closed' => 'üîí',
            default => '‚ùì'
        };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å
     */
    protected function getHumanReadableStatus(string $status): string
    {
        return match ($status) {
            'open' => '–û—Ç–∫—Ä—ã—Ç–∞',
            'in_progress' => '–í —Ä–∞–±–æ—Ç–µ',
            'resolved' => '–†–µ—à–µ–Ω–∞',
            'closed' => '–ó–∞–∫—Ä—ã—Ç–∞',
            default => $status
        };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
     */
    protected function getPriorityEmoji(string $priority): string
    {
        return match (strtolower($priority)) {
            'low' => 'üü¢',
            'medium' => 'üü°',
            'high' => 'üü†',
            'critical' => 'üî¥',
            default => '‚ùì'
        };
    }
}
