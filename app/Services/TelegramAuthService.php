<?php

namespace App\Services;

use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;

class TelegramAuthService
{
    protected TelegramService $telegramService;

    public function __construct(TelegramService $telegramService)
    {
        $this->telegramService = $telegramService;
    }

    /**
     * –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    public function startAuth(int $chatId): bool
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if ($this->isUserInAuthProcess($chatId)) {
            Log::info('User already in auth process', ['chat_id' => $chatId]);
            return false;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        Cache::put("telegram_auth_{$chatId}", [
            'step' => 'phone',
            'attempts' => 0,
            'started_at' => now()
        ], now()->addMinutes(15));

        $message = "üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ</b>\n\n";
        $message .= "–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:";

        return $this->telegramService->sendMessage($chatId, $message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    public function processPhone(int $chatId, string $phone): bool
    {
        $authState = $this->getAuthState($chatId);
        if (!$authState || $authState['step'] !== 'phone') {
            return false;
        }

        // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        $cleanPhone = preg_replace('/[^0-9]/', '', $phone);

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $user = User::where(function ($query) use ($cleanPhone) {
            $query->where('phone', 'like', "%{$cleanPhone}%")
                  ->orWhere('phone', 'like', "%" . substr($cleanPhone, -10) . "%")
                  ->orWhere('phone', $cleanPhone);
        })->first();

        if (!$user) {
            $this->incrementAuthAttempts($chatId);
            $message = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n";
            $message .= "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /login –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        if (!$user->is_active) {
            $this->clearAuthState($chatId);
            $message = "‚ùå –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.\n\n";
            $message .= "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–∞—Ä–æ–ª—è
        Cache::put("telegram_auth_{$chatId}", [
            'step' => 'password',
            'phone' => $cleanPhone,
            'user_id' => $user->id,
            'attempts' => 0,
            'started_at' => $authState['started_at']
        ], now()->addMinutes(15));

        $message = "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: <b>{$user->name}</b>\n\n";
        $message .= "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:";

        return $this->telegramService->sendMessage($chatId, $message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
     */
    public function processPassword(int $chatId, string $password): bool
    {
        $authState = $this->getAuthState($chatId);
        if (!$authState || $authState['step'] !== 'password') {
            return false;
        }

        $user = User::find($authState['user_id']);
        if (!$user) {
            $this->clearAuthState($chatId);
            $message = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        if (!Hash::check($password, $user->password)) {
            $this->incrementAuthAttempts($chatId);
            $message = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.\n\n";
            $message .= "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /login –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.";
            return $this->telegramService->sendMessage($chatId, $message);
        }

        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        $this->completeAuth($chatId, $user);
        return true;
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
     */
    protected function completeAuth(int $chatId, User $user): void
    {
        // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Auth::login($user);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID
        $user->update(['telegram_id' => $chatId]);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–µ—à–µ
        Cache::put("telegram_user_{$chatId}", [
            'user_id' => $user->id,
            'authenticated_at' => now(),
            'last_activity' => now()
        ], now()->addDays(30));

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        $this->clearAuthState($chatId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        $message = "üéâ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b>\n\n";
        $message .= "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{$user->name}</b>!\n\n";
        $message .= "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏.\n\n";
        $message .= "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n";
        $message .= "‚Ä¢ <code>/tickets</code> - –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫\n";
        $message .= "‚Ä¢ <code>/active</code> - –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏\n";
        $message .= "‚Ä¢ <code>/help</code> - –°–ø—Ä–∞–≤–∫–∞";

        $this->telegramService->sendMessage($chatId, $message);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        $user->updateLastLogin();

        Log::info('User authenticated successfully', [
            'chat_id' => $chatId,
            'user_id' => $user->id,
            'user_name' => $user->name
        ]);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public function isUserAuthenticated(int $chatId): bool
    {
        $userData = Cache::get("telegram_user_{$chatId}");
        
        if (!$userData || !isset($userData['user_id'])) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è (–±–æ–ª–µ–µ 7 –¥–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
        $lastActivity = $userData['last_activity'] ?? $userData['authenticated_at'];
        if (now()->diffInDays($lastActivity) > 7) {
            $this->clearUserSession($chatId);
            return false;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        $userData['last_activity'] = now();
        Cache::put("telegram_user_{$chatId}", $userData, now()->addDays(30));

        return true;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public function getAuthenticatedUser(int $chatId): ?User
    {
        if (!$this->isUserAuthenticated($chatId)) {
            return null;
        }

        $userData = Cache::get("telegram_user_{$chatId}");
        return User::find($userData['user_id']);
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public function logout(int $chatId): bool
    {
        $this->clearUserSession($chatId);
        $message = "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n";
        $message .= "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>/login</code>";
        
        return $this->telegramService->sendMessage($chatId, $message);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    public function isUserInAuthProcess(int $chatId): bool
    {
        return Cache::has("telegram_auth_{$chatId}");
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    public function getAuthState(int $chatId): ?array
    {
        return Cache::get("telegram_auth_{$chatId}");
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    protected function clearAuthState(int $chatId): void
    {
        Cache::forget("telegram_auth_{$chatId}");
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    protected function clearUserSession(int $chatId): void
    {
        Cache::forget("telegram_user_{$chatId}");
    }

    /**
     * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    protected function incrementAuthAttempts(int $chatId): void
    {
        $authState = $this->getAuthState($chatId);
        if (!$authState) {
            return;
        }

        $authState['attempts'] = ($authState['attempts'] ?? 0) + 1;

        // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫, –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
        if ($authState['attempts'] >= 3) {
            $this->clearAuthState($chatId);
            $message = "üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n\n";
            $message .= "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.";
            $this->telegramService->sendMessage($chatId, $message);
            return;
        }

        Cache::put("telegram_auth_{$chatId}", $authState, now()->addMinutes(15));
    }
}
