/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
 */

const { chromium } = require('@playwright/test');

async function globalTeardown(config) {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤...');
  
  const browser = await chromium.launch();
  const page = await browser.newPage();
  
  try {
    // –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    await page.goto('/login');
    await page.fill('input[name="login"]', '+7 (999) 123-45-67');
    await page.fill('input[name="password"]', 'password123');
    await page.click('button[type="submit"]');
    
    await page.waitForURL('**/');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await cleanupTestData(page);
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);
  } finally {
    await browser.close();
  }
}

async function cleanupTestData(page) {
  try {
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
    await page.goto('/all-tickets');
    await page.waitForLoadState('networkidle');
    
    // –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
    const selectAllCheckbox = page.locator('input[type="checkbox"][name="select_all"]');
    if (await selectAllCheckbox.isVisible()) {
      await selectAllCheckbox.check();
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
      await page.selectOption('select[name="bulk_action"]', 'delete');
      await page.click('button[type="submit"]');
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
      await page.click('button[data-confirm="delete"]');
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    await page.goto('/equipment');
    await page.waitForLoadState('networkidle');
    
    const equipmentSelectAll = page.locator('input[type="checkbox"][name="select_all"]');
    if (await equipmentSelectAll.isVisible()) {
      await equipmentSelectAll.check();
      
      await page.selectOption('select[name="bulk_action"]', 'delete');
      await page.click('button[type="submit"]');
      await page.click('button[data-confirm="delete"]');
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã
    await page.goto('/room');
    await page.waitForLoadState('networkidle');
    
    const roomSelectAll = page.locator('input[type="checkbox"][name="select_all"]');
    if (await roomSelectAll.isVisible()) {
      await roomSelectAll.check();
      
      await page.selectOption('select[name="bulk_action"]', 'delete');
      await page.click('button[type="submit"]');
      await page.click('button[data-confirm="delete"]');
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)
    await page.goto('/user');
    await page.waitForLoadState('networkidle');
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email
    const testEmails = ['master@test.com', 'technician@test.com', 'user@test.com'];
    
    for (const email of testEmails) {
      const userRow = page.locator(`tr:has-text("${email}")`);
      if (await userRow.isVisible()) {
        await userRow.locator('button[data-action="delete"]').click();
        await page.click('button[data-confirm="delete"]');
      }
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    await page.goto('/knowledge');
    await page.waitForLoadState('networkidle');
    
    const knowledgeSelectAll = page.locator('input[type="checkbox"][name="select_all"]');
    if (await knowledgeSelectAll.isVisible()) {
      await knowledgeSelectAll.check();
      
      await page.selectOption('select[name="bulk_action"]', 'delete');
      await page.click('button[type="submit"]');
      await page.click('button[data-confirm="delete"]');
    }
    
  } catch (error) {
    console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã:', error.message);
  }
}

module.exports = globalTeardown;
